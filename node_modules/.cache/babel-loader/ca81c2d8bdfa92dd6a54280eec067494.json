{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Practice\\\\loginPage\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {} //initial value to let IDE know the context value to hint us\n\n});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInfo = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInfo === \"1\") {\n      setIsLoggedIn(true); //component will run again -> loop -> useEffect\n    }\n  }, []); //call the 1st time when this component rendered (run or reload page)\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/React Practice/loginPage/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInfo","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACpCC,EAAAA,UAAU,EAAE,KADwB;AAEpCC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFkB;AAGpCC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAHI,CAGJ;;AAHI,CAApB,CAApB;AAMA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AACvC,QAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,sBAAsB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA/B;;AACA,QAAIF,sBAAsB,KAAK,GAA/B,EAAoC;AAChCD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADgC,CACX;AACxB;AACJ,GALQ,EAKN,EALM,CAAT,CAHuC,CAQ/B;;AAER,QAAMI,YAAY,GAAG,CAACR,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA;AACAK,IAAAA,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AACxBJ,IAAAA,YAAY,CAACK,UAAb,CAAwB,YAAxB;AACAP,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACP,MAAAA,UAAU,EAAEA,UAAb;AAAyBC,MAAAA,QAAQ,EAAEY,aAAnC;AAAkDX,MAAAA,OAAO,EAAES;AAA3D,KAA7B;AAAA,cACFL,KAAK,CAACS;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGC;;GAzBWV,mB;;KAAAA,mB;AA4BZ,eAAeP,WAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    onLogout: () => {},\r\n    onLogin: (email, password) => {}//initial value to let IDE know the context value to hint us\r\n});\r\n\r\nexport function AuthContextProvider(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const storedUserLoggedInInfo = localStorage.getItem(\"isLoggedIn\");\r\n        if (storedUserLoggedInInfo === \"1\") {\r\n            setIsLoggedIn(true); //component will run again -> loop -> useEffect\r\n        }\r\n    }, []); //call the 1st time when this component rendered (run or reload page)\r\n\r\n    const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        localStorage.setItem(\"isLoggedIn\", \"1\");\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem(\"isLoggedIn\");\r\n        setIsLoggedIn(false);\r\n    };\r\n\r\n    return <AuthContext.Provider value={{isLoggedIn: isLoggedIn, onLogout: logoutHandler, onLogin: loginHandler}}>\r\n        {props.children}\r\n        </AuthContext.Provider>\r\n    }\r\n\r\n\r\n    export default AuthContext;"]},"metadata":{},"sourceType":"module"}