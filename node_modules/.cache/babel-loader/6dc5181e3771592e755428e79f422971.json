{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Practice\\\\loginPage\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"EMAIL_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passReducer = (state, action) => {\n  if (action.type === \"PASS_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); //      STATE         ACTION\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null //init state\n\n  });\n  const [passState, dispatchPass] = useReducer(passReducer, {\n    value: \"\",\n    isValid: null //init state\n\n  }); //Object Destructing -> pull out the properties of object\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passIsValid\n  } = passState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(emailIsValid && passIsValid);\n    }, 500);\n    return () => {\n      clearTimeout(identifier); //temp to store keystroke...\n    }; //Clean function\n  }, [emailIsValid, passIsValid]); //called when pass and email changed (enter keystroke) -> get the correct state\n\n  const emailChangeHandler = event => {\n    //be dispatched to reducer action to change state (change value and isValid)\n    dispatchEmail({\n      type: \"EMAIL_INPUT\",\n      val: event.target.value\n    }); //action attribute\n    // setFormIsValid(\n    //     event.target.value.includes(\"@\") && passState.isValid\n    // ); //not optimal, because maybe state scheduled incorrect state\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPass({\n      type: \"PASS_INPUT\",\n      val: event.target.value\n    }); // setFormIsValid(\n    //     emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPass({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"VI0R7V9I7zL2x7K7z/ezhWSBT6M=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/React Practice/loginPage/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","val","isValid","includes","passReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passState","dispatchPass","emailIsValid","passIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useReducer} from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst emailReducer = (state, action) => {\n    if (action.type === \"EMAIL_INPUT\") {\n        return {value: action.val, isValid: action.val.includes(\"@\")};\n    }\n    if (action.type === \"INPUT_BLUR\") {\n        return {value: state.value, isValid: state.value.includes(\"@\")};\n    }\n    return {value: \"\", isValid: false};\n};\n\nconst passReducer = (state, action) => {\n    if (action.type === \"PASS_INPUT\") {\n        return {value: action.val, isValid: action.val.trim().length > 6}\n    }\n    if (action.type === \"INPUT_BLUR\") {\n        return {value: state.value, isValid: state.value.trim().length > 6}\n    }\n    return {value: \"\", isValid: false};\n}\n\nconst Login = props => {\n    // const [enteredEmail, setEnteredEmail] = useState(\"\");\n    // const [emailIsValid, setEmailIsValid] = useState();\n    // const [enteredPassword, setEnteredPassword] = useState(\"\");\n    // const [passwordIsValid, setPasswordIsValid] = useState();\n    const [formIsValid, setFormIsValid] = useState(false);\n    //      STATE         ACTION\n    const [emailState, dispatchEmail] = useReducer(emailReducer, {\n        value: \"\", isValid: null, //init state\n    });\n\n    const [passState, dispatchPass] = useReducer(passReducer, {\n        value: \"\", isValid: null, //init state\n    });\n\n    //Object Destructing -> pull out the properties of object\n    const {isValid: emailIsValid} = emailState;\n    const {isValid: passIsValid} = passState;\n\n    useEffect(() => {\n        const identifier = setTimeout(() => {\n            setFormIsValid(\n                emailIsValid && passIsValid\n            );\n        }, 500);\n\n        return () => {\n            clearTimeout(identifier); //temp to store keystroke...\n        }; //Clean function\n    }, [emailIsValid, passIsValid]); //called when pass and email changed (enter keystroke) -> get the correct state\n\n    const emailChangeHandler = (event) => {\n        //be dispatched to reducer action to change state (change value and isValid)\n        dispatchEmail({type: \"EMAIL_INPUT\", val: event.target.value}); //action attribute\n\n        // setFormIsValid(\n        //     event.target.value.includes(\"@\") && passState.isValid\n        // ); //not optimal, because maybe state scheduled incorrect state\n    };\n\n    const passwordChangeHandler = (event) => {\n        dispatchPass({type: \"PASS_INPUT\", val: event.target.value});\n\n        // setFormIsValid(\n        //     emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n        // );\n    };\n\n    const validateEmailHandler = () => {\n        dispatchEmail({type: \"INPUT_BLUR\"});\n    };\n\n    const validatePasswordHandler = () => {\n        dispatchPass({type: \"INPUT_BLUR\"});\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onLogin(emailState.value, passState.value);\n    };\n\n    return (\n        <Card className={classes.login}>\n            <form onSubmit={submitHandler}>\n                <div\n                    className={`${classes.control} ${\n                        emailState.isValid === false ? classes.invalid : \"\"\n                    }`}\n                >\n                    <label htmlFor=\"email\">E-Mail</label>\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        value={emailState.value}\n                        onChange={emailChangeHandler}\n                        onBlur={validateEmailHandler}\n                    />\n                </div>\n                <div\n                    className={`${classes.control} ${\n                        passState.isValid === false ? classes.invalid : \"\"\n                    }`}\n                >\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        value={passState.value}\n                        onChange={passwordChangeHandler}\n                        onBlur={validatePasswordHandler}\n                    />\n                </div>\n                <div className={classes.actions}>\n                    <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n                        Login\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}