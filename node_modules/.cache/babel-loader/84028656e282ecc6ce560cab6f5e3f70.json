{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Practice\\\\loginPage\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"EMAIL_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passReducer = (state, action) => {\n  if (action.type === \"PASS_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = () => {\n  _s();\n\n  const context = useContext(AuthContext); // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n\n  const [formIsValid, setFormIsValid] = useState(false); //      STATE         ACTION\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null //init state\n\n  });\n  const [passState, dispatchPass] = useReducer(passReducer, {\n    value: \"\",\n    isValid: null //init state\n\n  }); //Object Destructing -> pull out the properties of object (solve problem re-run effect\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passIsValid\n  } = passState; //Only use isValid to change, not use Value in state\n  //->the Value is changed but the isValid is not changed\n  // -> effect not rerun\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(emailIsValid && passIsValid);\n    }, 500);\n    return () => {\n      clearTimeout(identifier); //temp to store keystroke...\n    }; //Clean function\n  }, [emailIsValid, passIsValid]); //called when pass and email changed (enter keystroke) -> get the correct state\n\n  const emailChangeHandler = event => {\n    //be dispatched to reducer action to change state (change value and isValid)\n    dispatchEmail({\n      type: \"EMAIL_INPUT\",\n      val: event.target.value\n    }); //action attribute\n    // setFormIsValid(\n    //     event.target.value.includes(\"@\") && passState.isValid\n    // ); //not optimal, because maybe state scheduled incorrect state\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPass({\n      type: \"PASS_INPUT\",\n      val: event.target.value\n    }); // setFormIsValid(\n    //     emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPass({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    context.onLogin(emailState.value, passState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passIsValid,\n        value: passState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"7xj97L8wNDFNOQgHicoVEqeEn+w=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/React Practice/loginPage/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passReducer","trim","length","Login","context","formIsValid","setFormIsValid","emailState","dispatchEmail","passState","dispatchPass","emailIsValid","passIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,UAAjD,QAAmE,OAAnE;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AACjC,WAAO;AAAEC,MAAAA,KAAK,EAAEF,MAAM,CAACG,GAAhB;AAAqBC,MAAAA,OAAO,EAAEJ,MAAM,CAACG,GAAP,CAAWE,QAAX,CAAoB,GAApB;AAA9B,KAAP;AACD;;AACD,MAAIL,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AAAEC,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBE,MAAAA,OAAO,EAAEL,KAAK,CAACG,KAAN,CAAYG,QAAZ,CAAqB,GAArB;AAA/B,KAAP;AACD;;AACD,SAAO;AAAEH,IAAAA,KAAK,EAAE,EAAT;AAAaE,IAAAA,OAAO,EAAE;AAAtB,GAAP;AACD,CARD;;AAUA,MAAME,WAAW,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AAAEC,MAAAA,KAAK,EAAEF,MAAM,CAACG,GAAhB;AAAqBC,MAAAA,OAAO,EAAEJ,MAAM,CAACG,GAAP,CAAWI,IAAX,GAAkBC,MAAlB,GAA2B;AAAzD,KAAP;AACD;;AACD,MAAIR,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AAAEC,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAAf;AAAsBE,MAAAA,OAAO,EAAEL,KAAK,CAACG,KAAN,CAAYK,IAAZ,GAAmBC,MAAnB,GAA4B;AAA3D,KAAP;AACD;;AACD,SAAO;AAAEN,IAAAA,KAAK,EAAE,EAAT;AAAaE,IAAAA,OAAO,EAAE;AAAtB,GAAP;AACD,CARD;;AAUA,MAAMK,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,OAAO,GAAGlB,UAAU,CAACI,WAAD,CAA1B,CADkB,CAElB;AACA;AACA;AACA;;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,KAAD,CAA9C,CANkB,CAOlB;;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BvB,UAAU,CAACO,YAAD,EAAe;AAC3DI,IAAAA,KAAK,EAAE,EADoD;AAE3DE,IAAAA,OAAO,EAAE,IAFkD,CAE5C;;AAF4C,GAAf,CAA9C;AAKA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BzB,UAAU,CAACe,WAAD,EAAc;AACxDJ,IAAAA,KAAK,EAAE,EADiD;AAExDE,IAAAA,OAAO,EAAE,IAF+C,CAEzC;;AAFyC,GAAd,CAA5C,CAbkB,CAkBlB;;AACA,QAAM;AAAEA,IAAAA,OAAO,EAAEa;AAAX,MAA4BJ,UAAlC;AACA,QAAM;AAAET,IAAAA,OAAO,EAAEc;AAAX,MAA2BH,SAAjC,CApBkB,CAqBlB;AACA;AACA;;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,UAAU,GAAGC,UAAU,CAAC,MAAM;AAClCR,MAAAA,cAAc,CAACK,YAAY,IAAIC,WAAjB,CAAd;AACD,KAF4B,EAE1B,GAF0B,CAA7B;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,UAAD,CAAZ,CADW,CACe;AAC3B,KAFD,CALc,CAOX;AACJ,GARQ,EAQN,CAACF,YAAD,EAAeC,WAAf,CARM,CAAT,CAzBkB,CAiCe;;AAEjC,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACAT,IAAAA,aAAa,CAAC;AAAEb,MAAAA,IAAI,EAAE,aAAR;AAAuBE,MAAAA,GAAG,EAAEoB,KAAK,CAACC,MAAN,CAAatB;AAAzC,KAAD,CAAb,CAFoC,CAE6B;AAEjE;AACA;AACA;AACD,GAPD;;AASA,QAAMuB,qBAAqB,GAAIF,KAAD,IAAW;AACvCP,IAAAA,YAAY,CAAC;AAAEf,MAAAA,IAAI,EAAE,YAAR;AAAsBE,MAAAA,GAAG,EAAEoB,KAAK,CAACC,MAAN,CAAatB;AAAxC,KAAD,CAAZ,CADuC,CAGvC;AACA;AACA;AACD,GAND;;AAQA,QAAMwB,oBAAoB,GAAG,MAAM;AACjCZ,IAAAA,aAAa,CAAC;AAAEb,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AACD,GAFD;;AAIA,QAAM0B,uBAAuB,GAAG,MAAM;AACpCX,IAAAA,YAAY,CAAC;AAAEf,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAM2B,aAAa,GAAIL,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACM,cAAN;AACAnB,IAAAA,OAAO,CAACoB,OAAR,CAAgBjB,UAAU,CAACX,KAA3B,EAAkCa,SAAS,CAACb,KAA5C;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAER,OAAO,CAACqC,KAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEH,aAAhB;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAEX,YAJX;AAKE,QAAA,KAAK,EAAEJ,UAAU,CAACX,KALpB;AAME,QAAA,QAAQ,EAAEoB,kBANZ;AAOE,QAAA,MAAM,EAAEI;AAPV;AAAA;AAAA;AAAA;AAAA,cADF,eAUE,QAAC,KAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,KAAK,EAAC,UAFR;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,OAAO,EAAER,WAJX;AAKE,QAAA,KAAK,EAAEH,SAAS,CAACb,KALnB;AAME,QAAA,QAAQ,EAAEuB,qBANZ;AAOE,QAAA,MAAM,EAAEE;AAPV;AAAA;AAAA;AAAA;AAAA,cAVF,eAmBE;AAAK,QAAA,SAAS,EAAEjC,OAAO,CAACsC,OAAxB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAEtC,OAAO,CAACuC,GAAzC;AAA8C,UAAA,QAAQ,EAAE,CAACtB,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA9FD;;GAAMF,K;;KAAAA,K;AAgGN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"EMAIL_INPUT\") {\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passReducer = (state, action) => {\n  if (action.type === \"PASS_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = () => {\n  const context = useContext(AuthContext);\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  //      STATE         ACTION\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null, //init state\n  });\n\n  const [passState, dispatchPass] = useReducer(passReducer, {\n    value: \"\",\n    isValid: null, //init state\n  });\n\n  //Object Destructing -> pull out the properties of object (solve problem re-run effect\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passIsValid } = passState;\n  //Only use isValid to change, not use Value in state\n  //->the Value is changed but the isValid is not changed\n  // -> effect not rerun\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(emailIsValid && passIsValid);\n    }, 500);\n\n    return () => {\n      clearTimeout(identifier); //temp to store keystroke...\n    }; //Clean function\n  }, [emailIsValid, passIsValid]); //called when pass and email changed (enter keystroke) -> get the correct state\n\n  const emailChangeHandler = (event) => {\n    //be dispatched to reducer action to change state (change value and isValid)\n    dispatchEmail({ type: \"EMAIL_INPUT\", val: event.target.value }); //action attribute\n\n    // setFormIsValid(\n    //     event.target.value.includes(\"@\") && passState.isValid\n    // ); //not optimal, because maybe state scheduled incorrect state\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPass({ type: \"PASS_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //     emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPass({ type: \"INPUT_BLUR\" });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    context.onLogin(emailState.value, passState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input\n          id=\"email\"\n          label=\"E-Mail\"\n          type=\"email\"\n          isValid={emailIsValid}\n          value={emailState.value}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n        />\n        <Input\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          isValid={passIsValid}\n          value={passState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n        />\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}